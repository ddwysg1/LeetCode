Link: https://leetcode.com/problems/employee-importance/description/
/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
Version 1 (32ms)
class Solution {
    public int getImportance(List<Employee> employees, int id) {
        if (employees == null || id == 0) {
            return 0;
        }
        int value = 0;
        Queue<Employee> queue = new LinkedList<>();
        addSubordinates(employees, id, queue);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                Employee curt = queue.poll();
                value += curt.importance;
                for (int num : curt.subordinates) {
                    addSubordinates(employees, num, queue);
                }
            }
        }
        return value;
    }
    
    private void addSubordinates(List<Employee> employees, int id, Queue<Employee> queue) {
        for (Employee employee : employees) {
            if (employee.id == id) {
                queue.offer(employee);
                break;
            }
        }
    }
}

Version 2 (15ms)
//HashMap has been used to help improve the performance
class Solution {
    public int getImportance(List<Employee> employees, int id) {
        if (employees == null || id == 0) {
            return 0;
        }
        //store data in HashMap
        Map<Integer, Employee> map = new HashMap<Integer, Employee>();
        for (Employee emp : employees) {
            map.put(emp.id, emp);
        }
        //BFS
        int value = 0;
        Queue<Employee> queue = new LinkedList<>();
        queue.offer(map.get(id));
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                Employee curt = queue.poll();
                value += curt.importance;
                for (int num : curt.subordinates) {
                    queue.offer(map.get(num));
                }
            }
        }
        return value;
    }
}
