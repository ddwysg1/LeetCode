Link: https://leetcode.com/problems/generalized-abbreviation/description/
class Solution {
    public List<String> generateAbbreviations(String word) {
        List<String> result = new ArrayList<>();
        if (word.length() == 0) {
            result.add("");
            return result;
        }
        StringBuilder sb = new StringBuilder(word);
        dfs(result, sb, 0);
        result = transform(result);
        return result;
    }
    
    private void dfs(List<String> result,
                     StringBuilder sb,
                     int startIndex) {
        result.add(sb.toString());
        for (int i = startIndex; i < sb.length(); i++) {
            char ch = sb.toString().charAt(i);
            sb.replace(i, i + 1, "1");
            dfs(result, sb, i + 1);
            sb.replace(i, i + 1, String.valueOf(ch));
        }
    }
    
    private List<String> transform(List<String> result) {
        List<String> transformed = new ArrayList<>();
        for(String s : result) {
            StringBuilder sb = new StringBuilder();
            int count = 0;
            for (int i = 0; i < s.length(); i++) {
                if (Character.isLetter(s.charAt(i))){
                    if (count == 0) {
                        sb.append(s.charAt(i));
                    } else {
                        sb.append(count);
                        count = 0;
                        sb.append(s.charAt(i));
                    }
                } else if (!Character.isLetter(s.charAt(i)) && i == s.length() - 1){
                    count++;
                    sb.append(count);
                } else {
                    count++;
                }
            }
            transformed.add(sb.toString());
        }
        return transformed;
    }
}
