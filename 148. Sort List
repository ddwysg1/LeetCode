Link: https://leetcode.com/problems/sort-list/description/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null) {
            return null;
        }
        //exit
        if (head.next == null) {
            return head;
        }
        //split
        ListNode middle = findMiddle(head);
        ListNode right = sortList(middle.next);
        middle.next = null;
        ListNode left = sortList(head);
       
        //merge
        return merge(left,right);
    }
    
    private ListNode findMiddle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head.next;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
        
    private ListNode merge(ListNode headA, ListNode headB) {
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        while (headA != null && headB != null) {
            if (headA.val > headB.val) {
                tail.next = headB;
                headB = headB.next;
            } else {
                tail.next = headA;
                headA = headA.next;
            }
            tail = tail.next;
        }
        if (headA != null) {
            tail.next = headA;
        } else {
            tail.next = headB;
        }
        return dummy.next;
    }
}
