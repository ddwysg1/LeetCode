Link: https://leetcode.com/problems/factor-combinations/description/
class Solution {
    public List<List<Integer>> getFactors(int n) {
        List<List<Integer>> result = new ArrayList<>();
        if (n <= 3) {
            return result;
        }
        helper(n, 2, result, new ArrayList<Integer>());
        return result;
    }
    
    private void helper(int n,
                        int factor,
                        List<List<Integer>> result,
                        List<Integer> combination) {
        for (int i = factor; i <= Math.sqrt(n); i++) {
            if (n % i == 0 && n / i >= i) {
                combination.add(i);
                combination.add(n / i); 
                result.add(new ArrayList<>(combination));
                combination.remove(combination.size() - 1);
                helper(n / i, i, result, combination);
                combination.remove(combination.size() - 1);
            }
        }
    }
}
