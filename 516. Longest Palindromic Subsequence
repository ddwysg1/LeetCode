Link: https://leetcode.com/problems/longest-palindromic-subsequence/description/
class Solution {
    public int longestPalindromeSubseq(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        if (s.length() == 1) {
            return 1;
        }
        int n = s.length();
        int[][] f = new int[n][n];
        for (int i = 0; i < n; i++) {
            f[i][i] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            f[i][i + 1] = s.charAt(i) == s.charAt(i + 1) ? 2 : 1;
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                f[i][j] = Math.max(f[i + 1][j], f[i][j - 1]);
                if (s.charAt(i) == s.charAt(j)) {
                    f[i][j] = Math.max(f[i][j], f[i + 1][j - 1] + 2);
                }
            }   
        }
        return f[0][n - 1];
    }
}
