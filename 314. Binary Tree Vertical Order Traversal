Link: https://leetcode.com/problems/binary-tree-vertical-order-traversal/description/
class CoorNode {
    TreeNode node;
    int coor;
    public CoorNode(TreeNode node, int coor) {
        this.node = node;
        this.coor = coor;
    }
}

public class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        
        Map<Integer, List<Integer>> map = new HashMap<>();
        Queue<CoorNode> queue = new LinkedList<>();
        queue.offer(new CoorNode(root, 0));
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                CoorNode cNode = queue.poll();
                TreeNode node = cNode.node;
                int x = cNode.coor;
                if (!map.containsKey(x)) {
                    List<Integer> list = new ArrayList<>();
                    list.add(node.val);
                    map.put(x, list);
                } else {
                    map.get(x).add(node.val);
                }
                if (node.left != null) {
                    queue.offer(new CoorNode(node.left, x - 1));
                }
                if (node.right != null) {
                    queue.offer(new CoorNode(node.right, x + 1));
                }
            }
        }
        
        List<Map.Entry<Integer, List<Integer>>> l = new ArrayList<Map.Entry<Integer, List<Integer>>>(map.entrySet());
        Collections.sort(l, new Comparator<Map.Entry<Integer, List<Integer>>>() {
            public int compare(Map.Entry<Integer, List<Integer>> m1, Map.Entry<Integer, List<Integer>> m2) {
                return m1.getKey() - m2.getKey();
            }
        });
        for (int i = 0; i < l.size(); i++) {
            result.add(l.get(i).getValue());
        }
        return result;
    }
}
