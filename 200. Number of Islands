Link: https://leetcode.com/problems/number-of-islands/description/
class Coordinate {
    int x, y;
    public Coordinate(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

public class Solution {
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int n = grid.length;
        int m = grid[0].length;
        int islands = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '1') {
                    markByBfs(i, j, grid);
                    islands++;
                }
            }
        }
        return islands;
    }
    
    private void markByBfs(int x, int y, char[][] grid) {
        int[] xDirection = {1, 0, -1, 0};
        int[] yDirection = {0, 1, 0, -1};
        Queue<Coordinate> queue = new LinkedList<>();
        queue.offer(new Coordinate(x, y));
        grid[x][y] = '0';
        while (!queue.isEmpty()) {
            Coordinate coor = queue.poll();
            for (int i = 0; i < 4; i++) {
                Coordinate neibor = new Coordinate(coor.x + xDirection[i], coor.y + yDirection[i]);
                if (!inBound(neibor, grid)) {
                    continue;
                }
                if (grid[neibor.x][neibor.y] == '1') {
                    grid[neibor.x][neibor.y] = '0';
                    queue.offer(neibor);
                }
            }
        }         
    }
    
    private boolean inBound(Coordinate coor, char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        return coor.x >= 0 && coor.x < n && coor.y >= 0 && coor.y < m;
    }
}
