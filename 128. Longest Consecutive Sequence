Link: https://leetcode.com/problems/longest-consecutive-sequence/description/
class Solution {
    public int longestConsecutive(int[] nums) {
        UnionFind UF = new UnionFind(nums.length);
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])){
                continue;
            }
            map.put(nums[i],i);
            if (map.containsKey(nums[i] + 1)) {
                UF.union(i, map.get(nums[i] + 1));
            }
            if (map.containsKey(nums[i] - 1)) {
                UF.union(i, map.get(nums[i] - 1));
            }
        }
        return UF.maxUnion();
    }
}

class UnionFind {
    private int[] roots;
    public UnionFind(int n) {
        roots = new int[n];
        for (int i = 0; i < n; i++) {
            roots[i] = i;
        }
    }
    
    private int root(int id) {
        while (roots[id] != id) {
            roots[id] = roots[roots[id]];
            id = roots[id];
        }
        return id;
    }
    
    public boolean connected(int i, int j) {
        return root(i) == root(j);
    }
    
    public void union(int i, int j) {
        int root1 = root(i);
        int root2 = root(j);
        roots[root1] = root2;
    }
    
    public int maxUnion() {
        int[] count = new int[roots.length];
        int max = 0;
        for (int i = 0; i < roots.length; i++) {
            count[root(i)]++;
            max = Math.max(max, count[root(i)]);
        }
        return max;
    }
}
