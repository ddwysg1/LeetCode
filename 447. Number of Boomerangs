Link: https://leetcode.com/problems/number-of-boomerangs/description/
class Solution {
    public int numberOfBoomerangs(int[][] points) {
        int count = 0;
        if (points == null || points.length == 0 || points[0] == null || points[0].length == 0) {
            return count;
        }   
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < points.length; i++) {
            for (int j = 0; j < points.length; j++) {
                if (i == j) {
                    continue;
                }
                int dis = getDistance(points[i], points[j]);
                map.put(dis, map.getOrDefault(dis, 0) + 1);
            }
            for (int num : map.values()) {
                count += num * (num - 1);
            }
            map.clear();
        }
        
        return count;
    }
    
    private int getDistance(int[] p1, int[] p2) {
        int x = p1[0] - p2[0];
        int y = p1[1] - p2[1];
        return x * x + y * y;
    }
}
