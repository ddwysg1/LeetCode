Link: https://leetcode.com/problems/permutation-sequence/description/
class Solution {
    int count;
    String s;
    public String getPermutation(int n, int k) {
        if(n <= 0 || k <= 0) {
            return new String("");
        }
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = i + 1;
        }
        count = 0;
        dfs(nums, new boolean[n], new StringBuilder(), k);
        return s;
    }
    
    private void dfs(int[] nums,
                     boolean[] visited,
                     StringBuilder sb,
                     int k) {
        if (sb.length() == nums.length) {
            count++;
            if (count == k) {
                s = sb.toString();
            }
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (count == k) {
                return;
            }
            if (visited[i]) {
                continue;
            }
            sb.append(nums[i]);
            visited[i] = true;
            dfs(nums, visited, sb, k);
            visited[i] = false;
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
