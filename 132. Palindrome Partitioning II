Link: https://leetcode.com/problems/palindrome-partitioning-ii/description/
class Solution {
    public int minCut(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        char[] ch = s.toCharArray();
        int n = ch.length;
        boolean[][] palindrome = isPalindrome(ch);
        int[] dp = new int[n + 1];
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = Integer.MAX_VALUE;
            for (int j = 0; j < i; j++) {
                if (palindrome[j][i - 1] && dp[j] != Integer.MAX_VALUE && dp[j] + 1 < dp[i]) {
                    dp[i] = dp[j] + 1;
                }
            }
        }
        return dp[n] - 1;
    }
    
    public boolean[][] isPalindrome(char[] s) {
        int n = s.length;
        boolean[][] palindrome = new boolean[n][n];
        //character centered
        for (int i = 0; i < n; i++) {
            palindrome[i][i] = true;
            int p = i - 1;
            int q = i + 1;
            while(p >= 0 && q < n && s[p] == s[q]) {
                palindrome[p][q] = true;
                p--;
                q++;
            }
        }
        //line centered
        for (int i = 0; i < n - 1; i++) {
            int p = i;
            int q = i + 1;
            while(p >= 0 && q < n && s[p] == s[q]) {
                palindrome[p][q] = true;
                p--;
                q++;
            }
        }
        return palindrome;
    }
}
