Link: https://leetcode.com/problems/wiggle-subsequence/description/
class Solution {
    public int wiggleMaxLength(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int N = nums.length;
        if (N == 1) {
            return 1;
        }
        int[][] f = new int[N + 1][2];
        // 0 - positive, 1 - negative
        f[1][0] = 1;
        f[1][1] = nums[0];
        for (int i = 2; i <= N; i++) {
            for (int j = 1; j < i; j++) {
                if (nums[i - 1] == nums[j - 1]) {
                    f[i][0] = f[j][0];
                    continue;
                }
                int diff = nums[i - 1] - nums[j - 1] > 0 ? 0 : 1;
                if (diff != f[j][1]) {
                    f[i][0] = Math.max(f[i][0], f[j][0] + 1);
                    if (f[i][0] ==  f[j][0] + 1) {
                        f[i][1] = diff;
                    }
                } else {
                    f[i][0] = Math.max(1, f[i][0]);
                    if (f[i][0] ==  1) {
                        f[i][1] = diff;
                    }
                }
            }
        }
        return f[N][0];
    }
}
