Link: https://leetcode.com/problems/palindromic-substrings/description/
class Solution {
    public int countSubstrings(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        char[] ch = s.toCharArray();
        int count = 0;
        int n = ch.length;  
        boolean[][] f = new boolean[n][n];
        //character centered
        for (int i = 0; i < n; i++) {
            int p = i - 1;
            int q = i + 1;
            f[i][i] = true;
            count++;
            while (p >= 0 && q < n) {
                if (ch[p] == ch[q]) {
                    f[p][q] = true;
                    count++;
                } else {
                    break;
                }
                p--;
                q++;
            }
        }
        //line centered
        for (int i = 0; i < n - 1; i++) {
            int p = i;
            int q = i + 1;
            while (p >= 0 && q < n) {
                if (ch[p] == ch[q]) {
                    f[p][q] = true;
                    count++;
                } else {
                    break;
                }
                p--;
                q++;
            }
        }
        return count;
    }
}
