Link: https://leetcode.com/problems/surrounded-regions/description/
class Solution {
    private int m,n;
    
    private class UnionFind {
        int[] parent;
        int[] rank;
        
        public UnionFind(int n) {
            parent = new int[n];
            rank = new int[n];
            for(int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        
        public int find(int id) {
            while (parent[id] != id) {
                parent[id] = parent[parent[id]];
                id = parent[id];
            }
            return id;
        }
        
        public void union(int i, int j) {
            int root1 = find(i);
            int root2 = find(j);
            if (root1 == root2) {
                return;
            } else {
                if (rank[root2] < rank[root1]) {
                    parent[root2] = root1;
                } else {
                    parent[root1] = root2;
                    if (rank[root1] == rank[root2]) {
                        rank[root2]++;
                    }
                }
            }
        }
    }
    public void solve(char[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0) {
            return;
        }
        m = board.length;
        n = board[0].length;
        int dummy = m * n;
        UnionFind UF = new UnionFind(dummy + 1);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    if (i == 0 || j == 0 || i == m - 1 || j == n - 1){
                        UF.union(getNode(i, j), dummy);
                    } else {
                        if (i - 1 >= 0 && board[i - 1][j] == 'O') {
                            UF.union(getNode(i,j), getNode(i - 1,j));
                        }
                        if (i + 1 < m && board[i + 1][j] == 'O') {
                            UF.union(getNode(i,j), getNode(i + 1,j));
                        }
                        if (j + 1 < n && board[i][j + 1] == 'O') {
                            UF.union(getNode(i,j), getNode(i,j + 1));
                        }
                        if (j - 1 >= 0 && board[i][j - 1] == 'O') {
                            UF.union(getNode(i,j), getNode(i,j - 1));
                        }
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j =0; j < n; j++) {
                if (board[i][j] == 'O') {
                    if (UF.find(getNode(i, j)) != UF.find(dummy)) {
                        board[i][j] = 'X';
                    }
                }
            }
        }
    }
    
    private int getNode(int i, int j) {
        return i * n + j;
    }
}
