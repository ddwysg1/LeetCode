Link: https://leetcode.com/problems/strobogrammatic-number-ii/description/
class Solution {
    public List<String> findStrobogrammatic(int n) {
        List<String> res = new ArrayList<>();
        if (n == 0) {
            return res;
        }
        int[] num = new int[10];
        num[0] = 1;
        num[5] = 1;
        num[1] = 6;
        num[6] = 9;
        num[2] = 8;
        num[7] = 8;
        num[3] = 9;
        num[8] = 6;
        num[4] = 0;
        num[9] = 0;
        if (n == 1) {
            res.add("0");
            res.add("1");
            res.add("8");
            return res;
        }
        find(n, num, res, "");
        return res;
    }
    
    private void find(int n, int[] num, List<String> res, String s) {
        if (s.length() == n) {
            res.add(new String(s));
            return;
        }
        
        if (s.length() == n - 1) {
            for (int i = 0; i < 5; i += 2) {
                int len = s.length();
                s = s.substring(0, len / 2) + num[i] + s.substring(len / 2,len);
                find(n, num, res, s);
                s = s.substring(0, len / 2) + s.substring(len / 2 + 1, len + 1);
            }
        } else if (s.length() == 0) {
            for (int i = 0; i < 4; i++) {
                s = "" + num[i] + num[i + 5];
                find(n, num, res, s);
                s = "";
            }
        } else if (s.length() > 0) {
            for (int i = 0; i < 5; i++) {
                int len = s.length();
                s = s.substring(0, len / 2) + num[i] + num[i + 5] + s.substring(len / 2,len);
                find(n, num, res, s);
                s = s.substring(0, len / 2) + s.substring(len / 2 + 2, len + 2);
            }
        }
    }
}
