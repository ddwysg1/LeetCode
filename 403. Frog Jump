Link: https://leetcode.com/problems/frog-jump/description/
class Solution {
    public boolean canCross(int[] stones) {
        if (stones == null || stones.length <= 1) {
            return false;
        }
        if (stones[0] != 0 || stones[1] != 1) {
            return false;
        }
        //initialize
        int n = stones.length;
        Map<Integer, Set<Integer>> map = new HashMap<>(n);
        for (int i = 0; i < n; i++) {
            map.put(stones[i], new HashSet<>());
        }
        map.get(0).add(0);
        for (int i = 0; i < n; i++) {
            int stone = stones[i];
            for (int k : map.get(stone)) {
                if (k - 1 > 0 && map.containsKey(stone + k - 1)) {
                    map.get(stone + k - 1).add(k - 1);
                }
                if (map.containsKey(stone + k)) {
                    map.get(stone + k).add(k);
                }
                if (map.containsKey(stone + k + 1)) {
                    map.get(stone + k + 1).add(k + 1);
                }
            }
        }
        return !map.get(stones[n - 1]).isEmpty();
    }
}
