Link: https://leetcode.com/problems/4sum/description/
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return result;
        }
        Arrays.sort(nums);
        for(int i = 0; i < nums.length - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            for (int j = i + 1; j < nums.length - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                int subTarget = target - nums[i] - nums[j];
                List<Integer> combination = new ArrayList<>();
                combination.add(nums[i]);
                combination.add(nums[j]);
                twoSum(result, combination, nums, j + 1, nums.length - 1, subTarget);
            }
        }
        return result;
    }
    
    private void twoSum(List<List<Integer>> result,
                        List<Integer> combination,
                        int[] nums,
                        int left,
                        int right,
                        int target) {
        while (left < right) {
            if (nums[left] + nums[right] == target) {
                combination.add(nums[left]);
                combination.add(nums[right]);
                result.add(new ArrayList<>(combination));
                combination.remove(combination.size() - 1);
                combination.remove(combination.size() - 1);
                while (left + 1 < right && nums[left] == nums[left + 1]){
                    left++;
                }
                while (right - 1 > left && nums[right] == nums[right - 1]){
                    right--;
                }
                left++;
                right--;
            } else if (nums[left] + nums[right] > target) {
                right--;
            } else {
                left++;
            }
        }
    }
}
