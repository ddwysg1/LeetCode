Link: https://leetcode.com/problems/3sum-closest/description/
class Solution {
    int shortestDistance = Integer.MAX_VALUE;
    int sum;
    public int threeSumClosest(int[] A, int target) {
        Arrays.sort(A);
        for(int i = 0; i < A.length - 2; i++){
            if (i > 0 && A[i] == A[i - 1]) {
                continue;
            }
            int subTarget = target - A[i];
            int left = i + 1;
            int right = A.length - 1;
            twoSumClosest(A, left, right, subTarget, A[i]);
        }
        return sum;
    }
    private void twoSumClosest(int[] nums, int left, int right, int target, int base) {
        while(left < right) {
            int distance = Math.abs(nums[left] + nums[right] - target);
            if (distance < shortestDistance) {
                shortestDistance = distance;
                sum = nums[left] + nums[right] + base;
            }
            if (nums[left] + nums[right] < target) {
                left++;
            } else if (nums[left] + nums[right] > target) {
                right--;
            } else {
                return;
            }
        }
    }
}
