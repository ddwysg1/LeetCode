Link: https://www.lintcode.com/problem/sort-integers-ii/description
public class Solution {
    /**
     * @param A: an integer array
     * @return: nothing
     */
    public void sortIntegers2(int[] A) {
        // write your code here
        if(A == null || A.length == 0) {
            return;
        }
        int[] tmp = new int[A.length];
        merge(A, tmp, 0, A.length - 1);
    }
    
    private void merge(int[] A, int[] tmp, int start, int end) {
        if (start == end) {
            return;
        }
        int mid = start + (end - start) / 2;
        merge(A, tmp, start, mid);
        merge(A, tmp, mid + 1, end);
        
        int index = start;
        int leftStart = start;
        int rightStart = mid + 1;
        
        while (leftStart <= mid && rightStart <= end) {
            if (A[leftStart] <= A[rightStart]) {
                tmp[index++] = A[leftStart++];
            } else {
                tmp[index++] = A[rightStart++];
            }
        }
        
        while (leftStart <= mid) {
            tmp[index++] = A[leftStart++];
        }
        
        while (rightStart <= end) {
            tmp[index++] = A[rightStart++];
        }
        
        for (int i = start; i <= end; i++) {
            A[i] = tmp[i];
        }
    }
}
