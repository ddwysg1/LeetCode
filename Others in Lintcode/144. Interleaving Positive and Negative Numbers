Link: https://www.lintcode.com/problem/interleaving-positive-and-negative-numbers/description
public class Solution {
    /*
     * @param A: An integer array.
     * @return: nothing
     */
    public int left, right;
    public int start, end;
    public void rerange(int[] A) {
        // write your code here
        partition(A);
        if (((float) left == (float) A.length / 2)) {
            start = 1;
            end = A.length - 2;
        } else if ((float) left > (float) A.length / 2) {
            start = 1;
            end = A.length - 1;
        } else if ((float) left < (float) A.length / 2){
            reverse(A);
            start = 1;
            end = A.length - 1;
        }
        while(start < end) {
            swap(A, start, end);
            start += 2;
            end -= 2;
        }
    }
    
    public void partition(int[] nums) {
        left = 0;
        right = nums.length - 1;
        while (left < right) {
            while (left < right && nums[left] < 0) {
                left++;
            }
            while (left < right && nums[right] >= 0) {
                right--;
            }
            if (left < right) {
                swap(nums, left, right);
                left++;
                right--;
            }
        }
    }
    
    public void reverse(int[] nums) {
        int head = 0;
        int tail = nums.length - 1;
        while(head < tail) {
            swap(nums, head, tail);
            head++;
            tail--;
        }
    }
    
    private void swap(int[] nums, int pos1, int pos2) {
        int temp = nums[pos1];
        nums[pos1] = nums[pos2];
        nums[pos2] = temp;
    }
}
