Link: https://www.lintcode.com/problem/coins-in-a-line-ii/description
public class Solution {
    /**
     * @param values: a vector of integers
     * @return: a boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int[] values) {
        // write your code here
        int[] dp = new int[values.length + 1];
        boolean[] visited = new boolean[values.length + 1];
        int sum = 0;
        for (int value : values) {
            sum += value;
        }
        return sum < 2 * search(dp, values, values.length, visited);
    }
    
    private int search(int[] dp, int[] values, int n, boolean[] visited) {
        if (visited[n] == true) {
            return dp[n];
        }
        visited[n] = true;
        if (n == 0) {
            dp[n] = 0;
        } else if (n == 1) {
            dp[n] = values[values.length - 1];
        } else if (n == 2) {
            dp[n] = values[values.length - 1] + values[values.length - 2];
        } else if (n == 3) {
            dp[n] = values[values.length - 2] + values[values.length - 3];
        } else {
            dp[n] = Math.max(Math.min(search(dp, values, n - 2, visited), search(dp,values, n - 3, visited)) + values[values.length - n], Math.min(search(dp, values, n - 3, visited), search(dp,values, n - 4, visited)) + values[values.length - n] + values[values.length - n + 1]);
        }
        return dp[n];
    }
}
