Link: https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/description/
//great solution from Discuss
class Solution {
    public int longestSubstring(String s, int k) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int n = s.length();
        int[] counts = new int[26];
        char[] chars = s.toCharArray();
        int i, j, idx,max = 0, unique, noLessThank;
        
        for (int h = 1; h <= 26; h++) {
            i = 0;
            j = 0;
            Arrays.fill(counts, 0);
            unique = 0;
            noLessThank = 0;
            while(j < n) {
                if (unique <= h) {
                    idx = chars[j] - 'a';
                    if (counts[idx] == 0) {
                        unique++;                        
                    }
                    counts[idx]++;
                    if (counts[idx] == k) {
                        noLessThank++;                        
                    }
                    j++;
                } else {
                    idx = chars[i] - 'a';
                    if (counts[idx] == k) {
                        noLessThank--;                        
                    }
                    counts[idx]--;
                    if (counts[idx] == 0) {
                        unique--;
                    }
                    i++;
                }
                if (unique == h && unique == noLessThank) {
                    max = Math.max(max, j - i);
                }
            }
        }
        return max;
    }
}
