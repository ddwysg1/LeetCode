Link: https://leetcode.com/problems/keyboard-row/description/
class Solution {
    public String[] findWords(String[] words) {
        if (words == null || words.length == 0) {
            return new String[0];
        }
        Map<Character, Integer> map = new HashMap<>();
        //row1
        map.put('q', 1);
        map.put('w', 1);
        map.put('e', 1);
        map.put('r', 1);
        map.put('t', 1);
        map.put('y', 1);
        map.put('u', 1);
        map.put('i', 1);
        map.put('o', 1);
        map.put('p', 1);
        //row2    
        map.put('a', 2);
        map.put('s', 2);
        map.put('d', 2);
        map.put('f', 2);
        map.put('g', 2);
        map.put('h', 2);
        map.put('j', 2);
        map.put('k', 2);
        map.put('l', 2);
        //row3
        map.put('z', 3);
        map.put('x', 3);
        map.put('c', 3);
        map.put('v', 3);
        map.put('b', 3);
        map.put('n', 3);
        map.put('m', 3);
        
        List<String> list = new ArrayList<>();
        for (String s : words) {
            if (isValid(map, s)) {
                list.add(s);
            }
        }
        String[] strings = new String[list.size()];
        list.toArray(strings);
        
        return strings;
    }
    
    private boolean isValid(Map<Character, Integer> map, String s) {
        char c = Character.toLowerCase(s.charAt(0));
        int index = map.get(c);
        for (int i = 1; i < s.length(); i++) {
            c = Character.toLowerCase(s.charAt(i));
            if (map.get(c) != index) {
                return false;
            }
        }
        return true;
    }
}
