Link: https://leetcode.com/problems/graph-valid-tree/description/
class Solution {
    public boolean validTree(int n, int[][] edges) {
        if (n == 0) {
            return false;
        }
        if (edges.length != n - 1) {
            return false;
        }
        Map<Integer, Set<Integer>> graph = initializeGraph(n, edges);
        HashSet<Integer> set = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);
        set.add(0);
        while (!queue.isEmpty()) {
            int node = queue.poll();
            for (Integer neighbor: graph.get(node)) {
                if (set.contains(neighbor)) {
                    continue;
                }
                set.add(neighbor);
                queue.offer(neighbor);
            }
        }
        return (set.size() == n);
    }
    
    private Map<Integer, Set<Integer>> initializeGraph(int n, int[][] edges) {
       Map<Integer, Set<Integer>> graph = new HashMap<>();
       for (int i = 0; i < n; i++) {
           graph.put(i, new HashSet<Integer>());
       }        
       for (int i = 0; i < edges.length; i++) {
           int u = edges[i][0];
           int v = edges[i][1];
           graph.get(u).add(v);
           graph.get(v).add(u);
       }
        return graph;
    }
}
