Link: https://leetcode.com/problems/basic-calculator-ii/description/
class Solution {
    public int calculate(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        Stack<Integer> nums = new Stack<>();
        Stack<Character> signs = new Stack<>();
        int n = s.length();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c == ' ') {
                continue;
            } else if (Character.isDigit(c)) {
                int num = c - '0';
                while (i + 1 < n && Character.isDigit(s.charAt(i + 1))) {
                    num = num * 10 + s.charAt(i + 1) - '0';
                    i++;
                }
                if (!nums.isEmpty() && !signs.isEmpty()) {
                    if (signs.peek() == '*' || signs.peek() == '/') {
                        char sign = signs.pop();
                        int preNum = nums.pop();
                        if (sign == '*') {
                            num = num * preNum;
                        } else {
                            num = preNum / num;
                        }
                    }
                }
                nums.push(num);
            } else {
                signs.push(c);
            }
        }
        int res = 0;
        int size = signs.size();
        for (int i = 0; i < size; i++) {
            int v = nums.pop();
            char sign = signs.pop();
            if (sign == '+') {
                res += v;
            } else if (sign == '-'){
                res -= v;
            }
        }
        if (!nums.isEmpty()) {
            res += nums.pop();
        }
        return res;
    }
}
