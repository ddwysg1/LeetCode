Link: https://leetcode.com/problems/sort-characters-by-frequency/description/
class Solution {
    public String frequencySort(String s) {
        //get frequency
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (!map.containsKey(c)) {
                map.put(c, 1);
            } else {
                map.put(c, map.get(c) + 1);
            }
        }
        //sort
        List<Map.Entry<Character, Integer>> list = new ArrayList<Map.Entry<Character, Integer>>(map.entrySet());  
        Collections.sort(list, new Comparator<Map.Entry<Character, Integer>>() {   
          public int compare(Map.Entry<Character, Integer> c1, Map.Entry<Character, Integer> c2) {  
            return c2.getValue().compareTo(c1.getValue());
            }  
        });  
        //build string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < list.size(); i++) {
            Map.Entry<Character, Integer> entry = list.get(i);
            char c = entry.getKey();
            int repeatedTimes = entry.getValue();
            for (int j = 0; j < repeatedTimes; j++) {
                sb.append(c);
            }
        }
        return sb.toString();
    }
}
