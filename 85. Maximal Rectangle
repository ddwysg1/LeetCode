Link: https://leetcode.com/problems/maximal-rectangle/description/
class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int[] height = new int[n];
        int area = 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == '1') {
                    height[j]++;
                } else {
                    height[j] = 0;
                }
            }
            area = Math.max(area, largestRectangleArea(height));
        }
        return area;
    }
        
    public int largestRectangleArea(int[] bars) {
        if (bars == null || bars.length == 0) {
            return 0;
        }
        int[] heights = new int[bars.length + 1];
        for (int i = 0; i < bars.length; i++) {
            heights[i] = bars[i];
        }
        heights[bars.length] = 0;
        Stack<Integer> stack = new Stack<>();
        int area = 0;
        int i = 0;
        while (i < heights.length) {
            if (stack.empty() || heights[stack.peek()] <= heights[i]) {
                stack.push(i++);
            } else {
                int temp = stack.pop();
                area = Math.max(area, heights[temp] * (stack.empty() ? i : i - stack.peek() - 1));
            }
        }
        return area;
    }
}
