Link: https://leetcode.com/problems/lonely-pixel-ii/description/
Version 1: only beats 17%
class Solution {
    boolean fitRuleOne = false;
    boolean fitRuleTwo = true;
    int[] rows;
    public int findBlackPixel(char[][] picture, int N) {
        if (picture == null || picture.length == 0) {
            return 0;
        }
        if (picture[0] == null || picture[0].length == 0) {
            return 0;
        }
        rows = new int[N];
        int result = 0;
        int m = picture.length;
        int n = picture[0].length;
        int rowCount = 0;
        int[] cols = new int[N];
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(picture[i][j] == 'B') {                
                    if(rowCount >= N) {
                        rowCount++;
                        break;
                    } else {
                        cols[rowCount] = j;
                        rowCount++;
                    }
                }
            }
            if (rowCount == N) {
                for(int k = 0; k < N; k++) {
                    checkOne(picture, cols[k], N);
                    if (fitRuleOne == true){
                        checkTwo(picture, i, rows);
                        if (fitRuleTwo == true) {
                            result++;
                            fitRuleOne = false;
                        }
                    }
                }
            }
            rowCount = 0;
            fitRuleOne = false;
            fitRuleTwo = true;
        }
        return result;
    }
    
    private void checkOne(char[][] picture, int col, int N) {
        int count = 0;
        for (int i = 0; i < picture.length; i++) {
            if (picture[i][col] == 'B') {
                if (count >= N) {
                    count++;
                    break;
                } else {
                    rows[count] = i;
                    count++;
                }
            }
        }
        if (count == N) {
            fitRuleOne = true;
        }
    }
    
    private void checkTwo(char[][] picture, int row, int[] rows) {
        for (int i = 0; i < rows.length; i++) {
            if (row == rows[i]) {
                continue;
            }
            for (int j = 0; j < picture[0].length; j++) {
                if (picture[row][j] != picture[rows[i]][j]) {
                    fitRuleTwo = false;
                    return;
                }
            }
        }
    }
}

Version 2: beats 95% (see the difference at line 124 and 128)
class Solution {
    boolean fitRuleOne = false;
    boolean fitRuleTwo = true;
    int[] rows;
    public int findBlackPixel(char[][] picture, int N) {
        if (picture == null || picture.length == 0) {
            return 0;
        }
        if (picture[0] == null || picture[0].length == 0) {
            return 0;
        }
        rows = new int[N];
        int result = 0;
        int m = picture.length;
        int n = picture[0].length;
        int rowCount = 0;
        int[] cols = new int[N];
        boolean[] visited = new boolean[m];
        for(int i = 0; i < m; i++) {
            if (visited[i]) {
                continue;
            }
            for(int j = 0; j < n; j++) {
                if(picture[i][j] == 'B') {                
                    if(rowCount >= N) {
                        rowCount++;
                        break;
                    } else {
                        cols[rowCount] = j;
                        rowCount++;
                    }
                }
            }
            if (rowCount == N) {
                for(int k = 0; k < N; k++) {
                    checkOne(picture, cols[k], N);
                    if (fitRuleOne == true){
                        checkTwo(picture, i, rows);
                        if (fitRuleTwo == true) {
                            //record the same rows and skip then
                            for (int p = 0; p < rows.length; p++) {
                                visited[rows[p]] = true;
                            }
                            //count "same" pixel at one time
                            result += N;
                            fitRuleOne = false;
                        }
                    }
                }
            }
            rowCount = 0;
            fitRuleOne = false;
            fitRuleTwo = true;
        }
        return result;
    }
    
    private void checkOne(char[][] picture, int col, int N) {
        int count = 0;
        for (int i = 0; i < picture.length; i++) {
            if (picture[i][col] == 'B') {
                if (count >= N) {
                    count++;
                    break;
                } else {
                    rows[count] = i;
                    count++;
                }
            }
        }
        if (count == N) {
            fitRuleOne = true;
        }
    }
    
    private void checkTwo(char[][] picture, int row, int[] rows) {
        for (int i = 0; i < rows.length; i++) {
            if (row == rows[i]) {
                continue;
            }
            for (int j = 0; j < picture[0].length; j++) {
                if (picture[row][j] != picture[rows[i]][j]) {
                    fitRuleTwo = false;
                    return;
                }
            }
        }
    }
}
