Link: https://leetcode.com/problems/sum-root-to-leaf-numbers/description/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
Version 1: very slow
class Solution {
    public int sumNumbers(TreeNode root) {
        int ans = 0;
        if (root == null) {
            return ans;
        }
        List<Integer> result = new ArrayList<>();
        List<String> path = new ArrayList<>();
        dfs(result, path, root);
        for (int pathSum : result) {
            ans += pathSum;
        }
        return ans;
    }
    
    private void dfs(List<Integer> result,
                  List<String> path,
                  TreeNode root) {
        path.add(Integer.toString(root.val));
        if (root.left == null && root.right == null) {
            result.add(parse(path));
            return;
        }
        for (int i = 0; i < 2; i++) {
            if (root.left != null && i == 0) {
            dfs(result, path, root.left);
            path.remove(path.size() - 1);
            } else if (root.right != null && i == 1){
            dfs(result, path, root.right);
            path.remove(path.size() - 1);
            }
        }
    }
    
    private int parse(List<String> path) {
        StringBuilder sb = new StringBuilder();
        for (String s : path) {
            sb.append(s);
        }
        return Integer.parseInt(sb.toString());
    }
}

Version 2: fast
class Solution {
    public int sumNumbers(TreeNode root) {;
        return dfs(root, 0);
    }
    
    private int dfs(TreeNode root, int prev) {
        if (root == null) {
            return 0;
        }
        int sum = root.val + prev * 10;
        if (root.left == null && root.right == null) {
            return sum;
        }
        return dfs(root.left, sum) + dfs(root.right, sum);
    }
}
