Link: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/
class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length <= 1) {
            return 0;
        }
        int n = prices.length;
        int[][] f = new int[n + 1][3];
        for (int i = 0; i <= 1; i++) {
            for (int j = 0; j < 3; j++) {
                f[i][j] = 0;
            }
        }
        // 0: buy/do nothing; 1: cooldown; 2: sell;
        f[2][0] = 0;
        f[2][1] = 0;
        f[2][2] = prices[1] - prices[0];
        for (int i = 3; i <= n; i++) {
            f[i][0] = Math.max(f[i - 1][0], f[i - 1][1]);
            if (prices[i - 2] > prices[i - 3]) {
                f[i][1] = f[i - 1][2]; 
            }
            for (int j = 1; j < i; j++) {
                if (prices[i - 1] > prices[j - 1]) {
                    f[i][2] = Math.max(f[i][2], f[j][0] + prices[i - 1] - prices[j - 1]); 
                }
            }
        }
        return Math.max(f[n][0], Math.max(f[n][1], f[n][2]));
    }
}
