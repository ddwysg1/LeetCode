Link: https://leetcode.com/problems/combination-sum-iii/description/
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        if (k <= 0 || n <= 0) {
            return result;
        }
        List<Integer> combination = new ArrayList<>();
        dfs(result, combination, 0, k, n);
        return result;
    }
    
    private void dfs(List<List<Integer>> result, 
                     List<Integer> combination, 
                     int startIndex,
                     int k, 
                     int target) {
        if (combination.size() == k && target == 0) {
            result.add(new ArrayList<>(combination));
            return; 
        }
        for (int i = startIndex; i < 9; i++) {
            if (i > target || combination.size() >= k) {
                return;
            }
            combination.add(i + 1);
            dfs(result, combination, i + 1, k, target - i - 1);
            combination.remove(combination.size() - 1);
        }
    }
}
