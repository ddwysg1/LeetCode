Link: https://leetcode.com/problems/n-queens/description/
class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        if (n <= 0) {
            return result;
        }
        List<Integer> cols = new ArrayList<>();
        search(result, cols, n);
        return result;
    }
    
    private void search(List<List<String>> result, 
                        List<Integer> cols,
                        int n) {
        if (cols.size() == n) {
            result.add(buildChessBoard(cols));
        }
        for (int colIndex = 0; colIndex < n; colIndex++) {
            if (!isValid(cols, colIndex)) {
                continue;
            }
            cols.add(colIndex);
            search(result, cols, n);
            cols.remove(cols.size() - 1);
        }
    }
        
    private List<String> buildChessBoard(List<Integer> cols) {
        List<String> chessBoard = new ArrayList<>();
        for (int i = 0; i < cols.size(); i++) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < cols.size(); j++) {
                sb.append(cols.get(i) == j ? 'Q' : '.');
            }
            chessBoard.add(sb.toString());
        }
        return chessBoard;
    }
    
    private boolean isValid(List<Integer> cols, int column) {
        int row = cols.size();
        for (int rowIndex = 0; rowIndex < cols.size(); rowIndex++) {
            if (cols.get(rowIndex) == column) {
                return false;
            }
            if (rowIndex + cols.get(rowIndex) == row + column) {
                return false;
            }
            if (rowIndex - cols.get(rowIndex) == row - column) {
                return false;
            }
        }
        return true;
    }
}
