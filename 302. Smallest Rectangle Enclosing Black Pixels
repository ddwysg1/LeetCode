Link: https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels/description/
class Solution {
    public int minArea(char[][] image, int x, int y) {
        if (image == null || image.length == 0 || image[0].length == 0) {
            return 0;
        }
        // number of rows
        int n = image.length; 
        // number of columns
        int m = image[0].length;
        int left = findLeft(image, 0, y);
        int right = findRight(image, y, m - 1);
        int top = findTop(image, 0, x);
        int bottom = findBottom(image, x, n - 1);
        return (right - left + 1) * (bottom - top + 1);
    }
    
    private int findLeft(char[][] image, int start, int end) {
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (isEmptyColumns(image,mid)) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (isEmptyColumns(image,start)){
            return end;
        }
        return start;
    }
    
    private int findRight(char[][] image, int start, int end) {
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (isEmptyColumns(image,mid)) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (isEmptyColumns(image,end)){
            return start;
        }
        return end;
    }
    
    private int findTop(char[][] image, int start, int end) {
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (isEmptyRows(image,mid)) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (isEmptyRows(image,start)){
            return end;
        }
        return start;
    }
    
    private int findBottom(char[][] image, int start, int end) {
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (isEmptyRows(image,mid)) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (isEmptyRows(image,end)){
            return start;
        }
        return end;
    }
    
    private boolean isEmptyRows(char[][] image, int x) {
        int width = image[0].length;
        for (int i = 0; i < width; i++) {
            if (image[x][i] == '1') {
                return false;
            }
        }
        return true;
    }
    
    private boolean isEmptyColumns(char[][] image, int y) {
        int height = image.length;
        for (int i = 0; i < height; i++) {
            if (image[i][y] == '1') {
                return false;
            }
        }
        return true;
    }
}
