Link: https://leetcode.com/problems/permutations/description/
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return result;
        }
        List<Integer> permutation = new ArrayList<Integer>();
        boolean[] visited = new boolean[nums.length]; 
        dfs(nums, visited, permutation, result);
        return result;
    }
    
    private void dfs(int[] nums, boolean[] visited, List<Integer> permutation, List<List<Integer>> result) {
        if (nums.length == permutation.size()) {
            result.add(new ArrayList(permutation));
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i]) {
                continue;
            }
            permutation.add(nums[i]);
            visited[i] = true;
            dfs(nums, visited, permutation, result);
            permutation.remove(permutation.size() - 1);
            visited[i] = false;
        }
    }
}
